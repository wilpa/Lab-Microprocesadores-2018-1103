#define SEGMENT_A     2
#define SEGMENT_B     3
#define SEGMENT_C     4
#define SEGMENT_D     5
#define SEGMENT_E     6
#define SEGMENT_F     7
#define SEGMENT_G     8
#define SEGMENT_DP    9
#define DIGIT_0       13
#define DIGIT_1       12
#define DIGIT_2       11
#define DIGIT_3       10
#define POTENTIOMETER A0
#define PB            A2          
uint8_t Vref       =  5;

uint8_t pins_7_segments[8] = {SEGMENT_A,SEGMENT_B,SEGMENT_C,
                              SEGMENT_D,SEGMENT_E,SEGMENT_F,
                              SEGMENT_G,SEGMENT_DP};

uint8_t digits[4] = {DIGIT_0,DIGIT_1,DIGIT_2,DIGIT_3};

uint8_t byte_sequence[10] = {0x3F,0x06,0x5B,0x4F,0x66,
                     0x6D,0x7D,0x07,0x7F,0x6F};

void setup() {
  
  pinMode(SEGMENT_A, OUTPUT);
  pinMode(SEGMENT_B, OUTPUT);
  pinMode(SEGMENT_C, OUTPUT);
  pinMode(SEGMENT_D, OUTPUT);
  pinMode(SEGMENT_E, OUTPUT);
  pinMode(SEGMENT_F, OUTPUT);
  pinMode(SEGMENT_G, OUTPUT);
  pinMode(SEGMENT_DP, OUTPUT);
  pinMode(DIGIT_0, OUTPUT);
  pinMode(DIGIT_1, OUTPUT);
  pinMode(DIGIT_2, OUTPUT);
  pinMode(DIGIT_3, OUTPUT);
  pinMode(PB, INPUT);
  Serial.begin(9600);
  
}

uint16_t counter = 0;
int current_state = 0;
int previous_state = 0;

void loop() {
  
  current_state = digitalRead(PB);
  int ad_converter = analogRead(POTENTIOMETER);
  float voltage = (float)Vref * ad_converter / 1023;
  float resistance = (float)Vref * voltage / Vref;
  
  Serial.print(ad_converter);
  Serial.print("\t");
  Serial.print(voltage,3);
  Serial.print("V\t  ");
  Serial.print(resistance,3);
  Serial.println("Kohm");
  
   if(current_state && !previous_state)
  {
    counter++;
    previous_state = current_state;
  }
  
  int aux[4];
  
  switch (counter) {
    
  case 0:
    aux[0] = (int)(voltage * 1000) % 10;
    aux[1] = (int)(voltage * 100) % 10;
    aux[2] = (int)(voltage * 10) % 10;
    aux[3] = (int)(voltage) % 10;
    break;
  
  case 1:
    aux[0] = (int)(resistance * 1000) % 10;
    aux[1] = (int)(resistance * 100) % 10;
    aux[2] = (int)(resistance * 10) % 10;
    aux[3] = (int)(resistance) % 10;
    break;
  
  case 2:
    aux[0] = (ad_converter) % 10;
    aux[1] = (ad_converter / 10) % 10;
    aux[2] = (ad_converter / 100) % 10;
    aux[3] = (ad_converter / 1000) % 10;
    break;
  
   default:
    counter = 0;
    break;
  }
  
  segments_output_code(byte_sequence[aux[3]], 3, counter);
  delay(5);
  segments_output_code(byte_sequence[aux[2]], 2, counter);
  delay(5);
  segments_output_code(byte_sequence[aux[1]], 1, counter);
  delay(5);
  segments_output_code(byte_sequence[aux[0]], 0, counter);
  delay(5);
  previous_state = current_state;
  
}


void segments_output_code(uint8_t code, uint8_t digit, int counter)
{
  
  bool segments[8];
  segments[0] = (code & (1 << 0)) != 0;
  segments[1] = (code & (1 << 1)) != 0;
  segments[2] = (code & (1 << 2)) != 0;
  segments[3] = (code & (1 << 3)) != 0;
  segments[4] = (code & (1 << 4)) != 0;
  segments[5] = (code & (1 << 5)) != 0;
  segments[6] = (code & (1 << 6)) != 0;
  segments[7] = (code & (1 << 7)) != 0;

  bool digits[4];
  digits[0] = digits[1] = digits[2] = digits[3] = HIGH;
  digits[digit] = LOW;
  
  digitalWrite(SEGMENT_A, segments[0]);
  digitalWrite(SEGMENT_B, segments[1]);
  digitalWrite(SEGMENT_C, segments[2]);
  digitalWrite(SEGMENT_D, segments[3]);
  digitalWrite(SEGMENT_E, segments[4]);
  digitalWrite(SEGMENT_F, segments[5]);
  digitalWrite(SEGMENT_G, segments[6]);
  digitalWrite(SEGMENT_DP,segments[7]);
  
  digitalWrite(DIGIT_0,digits[0]);
  digitalWrite(DIGIT_1,digits[1]);
  digitalWrite(DIGIT_2,digits[2]);
  digitalWrite(DIGIT_3,digits[3]);
}
